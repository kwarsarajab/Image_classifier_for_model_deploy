# -*- coding: utf-8 -*-
"""Image_classify_for_model_deploy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zVirEATjb7zmuUrCchfn7on7kOKFiAul
"""

import numpy as np
import tensorflow as tf
import pandas as pd 
import matplotlib.pyplot as plt
import os

folder_dir = ("/content/drive/MyDrive/Colab Notebooks/Rock-Paper-Scissors_for_model_deploy/train")
batu_dir = os.path.join(folder_dir,'rock')
kertas_dir = os.path.join(folder_dir,'paper')
gunting_dir = os.path.join(folder_dir,'scissors')
os.listdir(folder_dir)

pd.DataFrame(data=[len(os.listdir(batu_dir)),
                   len(os.listdir(kertas_dir)), 
                   len(os.listdir(gunting_dir))], 
             index=['Gambar Batu', 'Gambar Kertas', 'Gambar Gunting'], 
             columns=['Total Gambar'])

from keras.preprocessing.image import ImageDataGenerator

generator = ImageDataGenerator(
    rescale = 1/255.0,
    zoom_range=0.25,
    rotation_range = 20,
    horizontal_flip = True,
    vertical_flip = True,
    fill_mode = 'nearest',
    validation_split=0.2
)

train_generator = generator.flow_from_directory(
    folder_dir,
    target_size=(150,150),
    batch_size=32,
    class_mode='categorical',
    color_mode='rgb',
    subset='training'
)
val_generator = generator.flow_from_directory(
    folder_dir,
    target_size=(150,150),
    batch_size=32,
    class_mode='categorical',
    color_mode='rgb',
    subset='validation'
)

###visualisasi data gambar

sample_images = generator.flow_from_directory(
    folder_dir,
    target_size=(150,150),
    batch_size=1,
    class_mode=None,
    color_mode='rgb',
    seed = 42
)

plt.figure(figsize=(10,10))

for i in range (9) :
    plt.subplot(3, 3, i + 1)
    img  = sample_images.next()[0]
    plt.imshow(img)
    plt.axis('off')
    
plt.show()

#pemodelan
model = tf.keras.models.Sequential([
        tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)), 
        tf.keras.layers.MaxPooling2D(2, 2),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
        tf.keras.layers.MaxPooling2D(2,2),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
        tf.keras.layers.MaxPooling2D(2,2),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(256, activation='relu'),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Dense(512, activation='relu'),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(3, activation=tf.nn.softmax)
])

model.summary()

#optimizer menggunakan adam
model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

#menggunakan callback untuk menghentikan training model jika accuracy mencapai target
class CallbackAcc(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if(logs.get('accuracy') >= 0.96):
            print("\nTelah mencapai %2.2f%% accuracy, model sudah mencapai target" %(logs.get('accuracy')*100))
            self.model.stop_training = True
callbacks = CallbackAcc()

#training model
historyModel = model.fit(
    train_generator,
    steps_per_epoch = 2,
    epochs = 200,
    validation_data = val_generator,
    validation_steps = 1,
    verbose = 1,
    callbacks = [callbacks])

#visualiasasi
plt.subplot(1, 2, 1)
plt.plot(historyModel.history['loss'])
plt.plot(historyModel.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper right')

plt.subplot(1, 2, 2)
plt.plot(historyModel.history['accuracy'])
plt.plot(historyModel.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper right')
plt.show()

import pathlib
# Menyimpan model dalam format SavedModel
export_dir = 'saved_model/'
tf.saved_model.save(model, export_dir)
 
# Convert SavedModel menjadi vegs.tflite
converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()
 
tflite_model_file = pathlib.Path('image_classify_rock_paper_scissor.tflite')
tflite_model_file.write_bytes(tflite_model)